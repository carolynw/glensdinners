@model IEnumerable<Post>
@inject IOptionsSnapshot<BlogSettings> settings
@{
    string host = Context.Request.Scheme + "://" + Context.Request.Host;

    var json = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(@Model, Newtonsoft.Json.Formatting.None));
}

@section Head {
   

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.5.1/dist/leaflet.css"
   integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
   crossorigin=""/>

<style class="text/css">
    #map { height: 180px; }
</style>
}

<article class="post container" itemscope itemtype="http://schema.org/BlogPosting" itemprop="blogPost">
    <header>
        <h1 itemprop="name headline">Map view</h1>
        
    </header>

    <div itemprop="articleBody mainEntityOfPage" cdnify>
 
    </div>
    <div>

<div class="container mt-3 mt-sm-5" id="app">
  <div class="row">
    <div class="col-md-9">
      <div class="map" id="map"></div>
    </div>
    <div class="col-md-3">
      <div
        class="form-check"
        v-for="layer in layers"
        :key="layer.id"
      >
        <label class="form-check-label">
          <input
            class="form-check-input"
            type="checkbox"
            v-model="layer.active"
            v-on:change="layerChanged(layer.id, layer.active)"
          />
          {{ layer.name }}
        </label>
      </div>
    </div>
  </div>
</div>



    </div>
    <footer>
   @json

    </footer>
</article>



@section Scripts {



 <script src="https://unpkg.com/leaflet@1.5.1/dist/leaflet.js"
   integrity="sha512-GffPMF3RvMeYyc1LWMHtK8EbPv0iNZ8/oTtHPx9/cc2ILxQ+u905qIwdpULaqDkyBKgOaB57QTMg7ztg8Jm2Og=="
   crossorigin=""></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.min.js"></script>
<!-- 
<script src="js/app.js"></script>
-->
<script type="text/javascript">


        new Vue({
  el: '#app',
  data: {
    map: null,
    tileLayer: null,
    layers: [
      {
        id: 0,
        name: 'Restaurants',
        active: false,
        features: [
          {
            id: 0,
            name: 'Bogart\'s Smokehouse',
            type: 'marker',
            coords: [38.6109607, -90.2050322],
          },
          {
            id: 1,
            name: 'Pappy\'s Smokehouse',
            type: 'marker',
            coords: [38.6350008, -90.2261532],
          },
          {
            id: 2,
            name: 'Broadway Oyster Bar',
            type: 'marker',
            coords: [38.6188362, -90.1947098],
          },
          {
            id: 3,
            name: 'Charlie Gitto\'s On the Hill',
            type: 'marker',
            coords: [38.617972, -90.2756436],
          },
          {
            id: 4,
            name: 'Sugarfire',
            type: 'marker',
            coords: [38.6304077, -90.1916921],
          },
          {
            id: 5,
            name: 'The Shaved Duck',
            type: 'marker',
            coords: [38.6036282, -90.2381407],
          },
          {
            id: 6,
            name: 'Mango Restaurant',
            type: 'marker',
            coords: [38.6313642, -90.1961267],
          },
          {
            id: 7,
            name: 'Zia\'s Restaurant',
            type: 'marker',
            coords: [38.6157376, -90.27716],
          },
          {
            id: 8,
            name: 'Anthonio\'s Taverna',
            type: 'marker',
            coords: [38.6143846, -90.280048],
          },
        ],
      }
    ],
  },
  mounted() {
    this.initMap();
    this.initLayers();
  },
  methods: {
    layerChanged(layerId, active) {
      const layer = this.layers.find(layer => layer.id === layerId);
      
      layer.features.forEach((feature) => {
        if (active) {
          feature.leafletObject.addTo(this.map);
        } else {
          feature.leafletObject.removeFrom(this.map);
        }
      });
    },
    initLayers() {
      this.layers.forEach((layer) => {
        const markerFeatures = layer.features.filter(feature => feature.type === 'marker');
        //const polygonFeatures = layer.features.filter(feature => feature.type === 'polygon');
        
        markerFeatures.forEach((feature) => {
          feature.leafletObject = L.marker(feature.coords)
            .bindPopup(feature.name);
        });
        
        polygonFeatures.forEach((feature) => {
          feature.leafletObject = L.polygon(feature.coords)
            .bindPopup(feature.name);
        });
      });
    },
    initMap() {
      this.map = L.map('map').setView([38.63, -90.23], 12);
      this.tileLayer = L.tileLayer(
        'https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}.png',
        {
          maxZoom: 18,
          attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, &copy; <a href="https://carto.com/attribution">CARTO</a>',
        }
      );
        
      this.tileLayer.addTo(this.map);
    },
  },
});


</script>



}